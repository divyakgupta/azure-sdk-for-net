// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.KeyVault;

namespace Microsoft.Azure.KeyVault
{
    /// <summary>
    /// Azure Key Vault client
    /// </summary>
    public static partial class SecretOperationsExtensions
    {
        /// <summary>
        /// Delete secret
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.KeyVault.ISecretOperations.
        /// </param>
        /// <param name='secretIdentifier'>
        /// Required.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static SecretResponseMessage Delete(this ISecretOperations operations, string secretIdentifier)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISecretOperations)s).DeleteAsync(secretIdentifier);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Delete secret
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.KeyVault.ISecretOperations.
        /// </param>
        /// <param name='secretIdentifier'>
        /// Required.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<SecretResponseMessage> DeleteAsync(this ISecretOperations operations, string secretIdentifier)
        {
            return operations.DeleteAsync(secretIdentifier, CancellationToken.None);
        }
        
        /// <summary>
        /// Get secret
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.KeyVault.ISecretOperations.
        /// </param>
        /// <param name='secretIdentifier'>
        /// Required.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static SecretResponseMessage Get(this ISecretOperations operations, string secretIdentifier)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISecretOperations)s).GetAsync(secretIdentifier);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get secret
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.KeyVault.ISecretOperations.
        /// </param>
        /// <param name='secretIdentifier'>
        /// Required.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<SecretResponseMessage> GetAsync(this ISecretOperations operations, string secretIdentifier)
        {
            return operations.GetAsync(secretIdentifier, CancellationToken.None);
        }
        
        /// <summary>
        /// Get
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.KeyVault.ISecretOperations.
        /// </param>
        /// <param name='vault'>
        /// Required.
        /// </param>
        /// <param name='top'>
        /// Required.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static ListSecretsResponseMessage List(this ISecretOperations operations, string vault, int? top)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISecretOperations)s).ListAsync(vault, top);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.KeyVault.ISecretOperations.
        /// </param>
        /// <param name='vault'>
        /// Required.
        /// </param>
        /// <param name='top'>
        /// Required.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<ListSecretsResponseMessage> ListAsync(this ISecretOperations operations, string vault, int? top)
        {
            return operations.ListAsync(vault, top, CancellationToken.None);
        }
        
        /// <summary>
        /// Get
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.KeyVault.ISecretOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static ListSecretsResponseMessage ListNext(this ISecretOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISecretOperations)s).ListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.KeyVault.ISecretOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<ListSecretsResponseMessage> ListNextAsync(this ISecretOperations operations, string nextLink)
        {
            return operations.ListNextAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Get
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.KeyVault.ISecretOperations.
        /// </param>
        /// <param name='vault'>
        /// Required.
        /// </param>
        /// <param name='secretName'>
        /// Required.
        /// </param>
        /// <param name='top'>
        /// Required.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static ListSecretsResponseMessage ListVersions(this ISecretOperations operations, string vault, string secretName, int? top)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISecretOperations)s).ListVersionsAsync(vault, secretName, top);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.KeyVault.ISecretOperations.
        /// </param>
        /// <param name='vault'>
        /// Required.
        /// </param>
        /// <param name='secretName'>
        /// Required.
        /// </param>
        /// <param name='top'>
        /// Required.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<ListSecretsResponseMessage> ListVersionsAsync(this ISecretOperations operations, string vault, string secretName, int? top)
        {
            return operations.ListVersionsAsync(vault, secretName, top, CancellationToken.None);
        }
        
        /// <summary>
        /// Get
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.KeyVault.ISecretOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static ListSecretsResponseMessage ListVersionsNext(this ISecretOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISecretOperations)s).ListVersionsNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.KeyVault.ISecretOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<ListSecretsResponseMessage> ListVersionsNextAsync(this ISecretOperations operations, string nextLink)
        {
            return operations.ListVersionsNextAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Set secret
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.KeyVault.ISecretOperations.
        /// </param>
        /// <param name='secretIdentifier'>
        /// Required.
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static SecretResponseMessage Set(this ISecretOperations operations, string secretIdentifier, SecretRequestMessage request)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISecretOperations)s).SetAsync(secretIdentifier, request);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Set secret
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.KeyVault.ISecretOperations.
        /// </param>
        /// <param name='secretIdentifier'>
        /// Required.
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<SecretResponseMessage> SetAsync(this ISecretOperations operations, string secretIdentifier, SecretRequestMessage request)
        {
            return operations.SetAsync(secretIdentifier, request, CancellationToken.None);
        }
        
        /// <summary>
        /// Update secret
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.KeyVault.ISecretOperations.
        /// </param>
        /// <param name='secretIdentifier'>
        /// Required.
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static SecretResponseMessage Update(this ISecretOperations operations, string secretIdentifier, UpdateSecretRequestMessage request)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISecretOperations)s).UpdateAsync(secretIdentifier, request);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Update secret
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.KeyVault.ISecretOperations.
        /// </param>
        /// <param name='secretIdentifier'>
        /// Required.
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<SecretResponseMessage> UpdateAsync(this ISecretOperations operations, string secretIdentifier, UpdateSecretRequestMessage request)
        {
            return operations.UpdateAsync(secretIdentifier, request, CancellationToken.None);
        }
    }
}
