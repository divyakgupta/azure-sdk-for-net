// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.KeyVault;

namespace Microsoft.Azure.KeyVault
{
    /// <summary>
    /// Secrets REST APIs
    /// </summary>
    public partial interface ISecretOperations
    {
        /// <summary>
        /// Delete secret
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<SecretResponseMessage> DeleteAsync(string secretIdentifier, CancellationToken cancellationToken);
        
        /// <summary>
        /// Get secret
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<SecretResponseMessage> GetAsync(string secretIdentifier, CancellationToken cancellationToken);
        
        /// <summary>
        /// Get
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<ListSecretsResponseMessage> ListAsync(string vault, int? top, CancellationToken cancellationToken);
        
        /// <summary>
        /// Get
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<ListSecretsResponseMessage> ListNextAsync(string nextLink, CancellationToken cancellationToken);
        
        /// <summary>
        /// Get
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<ListSecretsResponseMessage> ListVersionsAsync(string vault, string secretName, int? top, CancellationToken cancellationToken);
        
        /// <summary>
        /// Get
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<ListSecretsResponseMessage> ListVersionsNextAsync(string nextLink, CancellationToken cancellationToken);
        
        /// <summary>
        /// Set secret
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<SecretResponseMessage> SetAsync(string secretIdentifier, SecretRequestMessage request, CancellationToken cancellationToken);
        
        /// <summary>
        /// Update secret
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<SecretResponseMessage> UpdateAsync(string secretIdentifier, UpdateSecretRequestMessage request, CancellationToken cancellationToken);
    }
}
