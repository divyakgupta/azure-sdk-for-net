// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure.KeyVault;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.KeyVault
{
    /// <summary>
    /// Secrets REST APIs
    /// </summary>
    internal partial class SecretOperations : IServiceOperations<KeyVaultInternalClient>, ISecretOperations
    {
        /// <summary>
        /// Initializes a new instance of the SecretOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal SecretOperations(KeyVaultInternalClient client)
        {
            this._client = client;
        }
        
        private KeyVaultInternalClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.KeyVault.KeyVaultInternalClient.
        /// </summary>
        public KeyVaultInternalClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Delete secret
        /// </summary>
        /// <param name='secretIdentifier'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<SecretResponseMessage> DeleteAsync(string secretIdentifier, CancellationToken cancellationToken)
        {
            // Validate
            if (secretIdentifier == null)
            {
                throw new ArgumentNullException("secretIdentifier");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("secretIdentifier", secretIdentifier);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + secretIdentifier;
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-02-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SecretResponseMessage result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new SecretResponseMessage();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            result.Id = idInstance;
                        }
                        
                        JToken valueValue = responseDoc["value"];
                        if (valueValue != null && valueValue.Type != JTokenType.Null)
                        {
                            string valueInstance = ((string)valueValue);
                            result.Value = valueInstance;
                        }
                        
                        JToken contentTypeValue = responseDoc["contentType"];
                        if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                        {
                            string contentTypeInstance = ((string)contentTypeValue);
                            result.ContentType = contentTypeInstance;
                        }
                        
                        JToken attributesValue = responseDoc["attributes"];
                        if (attributesValue != null && attributesValue.Type != JTokenType.Null)
                        {
                            SecretAttributes attributesInstance = new SecretAttributes();
                            result.Attributes = attributesInstance;
                            
                            JToken enabledValue = attributesValue["enabled"];
                            if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                            {
                                bool enabledInstance = ((bool)enabledValue);
                                attributesInstance.Enabled = enabledInstance;
                            }
                            
                            JToken nbfValue = attributesValue["nbf"];
                            if (nbfValue != null && nbfValue.Type != JTokenType.Null)
                            {
                                long nbfInstance = ((long)nbfValue);
                                attributesInstance.NotBefore = nbfInstance;
                            }
                            
                            JToken expValue = attributesValue["exp"];
                            if (expValue != null && expValue.Type != JTokenType.Null)
                            {
                                long expInstance = ((long)expValue);
                                attributesInstance.Expires = expInstance;
                            }
                            
                            JToken createdValue = attributesValue["created"];
                            if (createdValue != null && createdValue.Type != JTokenType.Null)
                            {
                                long createdInstance = ((long)createdValue);
                                attributesInstance.Created = createdInstance;
                            }
                            
                            JToken updatedValue = attributesValue["updated"];
                            if (updatedValue != null && updatedValue.Type != JTokenType.Null)
                            {
                                long updatedInstance = ((long)updatedValue);
                                attributesInstance.Updated = updatedInstance;
                            }
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey = ((string)property.Name);
                                string tagsValue = ((string)property.Value);
                                result.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get secret
        /// </summary>
        /// <param name='secretIdentifier'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<SecretResponseMessage> GetAsync(string secretIdentifier, CancellationToken cancellationToken)
        {
            // Validate
            if (secretIdentifier == null)
            {
                throw new ArgumentNullException("secretIdentifier");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("secretIdentifier", secretIdentifier);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + secretIdentifier;
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-02-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SecretResponseMessage result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new SecretResponseMessage();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            result.Id = idInstance;
                        }
                        
                        JToken valueValue = responseDoc["value"];
                        if (valueValue != null && valueValue.Type != JTokenType.Null)
                        {
                            string valueInstance = ((string)valueValue);
                            result.Value = valueInstance;
                        }
                        
                        JToken contentTypeValue = responseDoc["contentType"];
                        if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                        {
                            string contentTypeInstance = ((string)contentTypeValue);
                            result.ContentType = contentTypeInstance;
                        }
                        
                        JToken attributesValue = responseDoc["attributes"];
                        if (attributesValue != null && attributesValue.Type != JTokenType.Null)
                        {
                            SecretAttributes attributesInstance = new SecretAttributes();
                            result.Attributes = attributesInstance;
                            
                            JToken enabledValue = attributesValue["enabled"];
                            if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                            {
                                bool enabledInstance = ((bool)enabledValue);
                                attributesInstance.Enabled = enabledInstance;
                            }
                            
                            JToken nbfValue = attributesValue["nbf"];
                            if (nbfValue != null && nbfValue.Type != JTokenType.Null)
                            {
                                long nbfInstance = ((long)nbfValue);
                                attributesInstance.NotBefore = nbfInstance;
                            }
                            
                            JToken expValue = attributesValue["exp"];
                            if (expValue != null && expValue.Type != JTokenType.Null)
                            {
                                long expInstance = ((long)expValue);
                                attributesInstance.Expires = expInstance;
                            }
                            
                            JToken createdValue = attributesValue["created"];
                            if (createdValue != null && createdValue.Type != JTokenType.Null)
                            {
                                long createdInstance = ((long)createdValue);
                                attributesInstance.Created = createdInstance;
                            }
                            
                            JToken updatedValue = attributesValue["updated"];
                            if (updatedValue != null && updatedValue.Type != JTokenType.Null)
                            {
                                long updatedInstance = ((long)updatedValue);
                                attributesInstance.Updated = updatedInstance;
                            }
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey = ((string)property.Name);
                                string tagsValue = ((string)property.Value);
                                result.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get
        /// </summary>
        /// <param name='vault'>
        /// Required.
        /// </param>
        /// <param name='top'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<ListSecretsResponseMessage> ListAsync(string vault, int? top, CancellationToken cancellationToken)
        {
            // Validate
            if (vault == null)
            {
                throw new ArgumentNullException("vault");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("vault", vault);
                tracingParameters.Add("top", top);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + vault;
            url = url + "/secrets/";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-02-01-preview");
            if (top != null)
            {
                queryParameters.Add("maxresults=" + Uri.EscapeDataString(top.Value.ToString()));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ListSecretsResponseMessage result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ListSecretsResponseMessage();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                ListSecretResponseMessage listSecretResponseMessageInstance = new ListSecretResponseMessage();
                                result.Value.Add(listSecretResponseMessageInstance);
                                
                                JToken contentTypeValue = valueValue["contentType"];
                                if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                                {
                                    string contentTypeInstance = ((string)contentTypeValue);
                                    listSecretResponseMessageInstance.ContentType = contentTypeInstance;
                                }
                                
                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    listSecretResponseMessageInstance.Id = idInstance;
                                }
                                
                                JToken attributesValue = valueValue["attributes"];
                                if (attributesValue != null && attributesValue.Type != JTokenType.Null)
                                {
                                    SecretAttributes attributesInstance = new SecretAttributes();
                                    listSecretResponseMessageInstance.Attributes = attributesInstance;
                                    
                                    JToken enabledValue = attributesValue["enabled"];
                                    if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                                    {
                                        bool enabledInstance = ((bool)enabledValue);
                                        attributesInstance.Enabled = enabledInstance;
                                    }
                                    
                                    JToken nbfValue = attributesValue["nbf"];
                                    if (nbfValue != null && nbfValue.Type != JTokenType.Null)
                                    {
                                        long nbfInstance = ((long)nbfValue);
                                        attributesInstance.NotBefore = nbfInstance;
                                    }
                                    
                                    JToken expValue = attributesValue["exp"];
                                    if (expValue != null && expValue.Type != JTokenType.Null)
                                    {
                                        long expInstance = ((long)expValue);
                                        attributesInstance.Expires = expInstance;
                                    }
                                    
                                    JToken createdValue = attributesValue["created"];
                                    if (createdValue != null && createdValue.Type != JTokenType.Null)
                                    {
                                        long createdInstance = ((long)createdValue);
                                        attributesInstance.Created = createdInstance;
                                    }
                                    
                                    JToken updatedValue = attributesValue["updated"];
                                    if (updatedValue != null && updatedValue.Type != JTokenType.Null)
                                    {
                                        long updatedInstance = ((long)updatedValue);
                                        attributesInstance.Updated = updatedInstance;
                                    }
                                }
                                
                                JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = ((string)property.Name);
                                        string tagsValue = ((string)property.Value);
                                        listSecretResponseMessageInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                            }
                        }
                        
                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                        {
                            string nextLinkInstance = ((string)nextLinkValue);
                            result.NextLink = nextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get
        /// </summary>
        /// <param name='nextLink'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<ListSecretsResponseMessage> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ListSecretsResponseMessage result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ListSecretsResponseMessage();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                ListSecretResponseMessage listSecretResponseMessageInstance = new ListSecretResponseMessage();
                                result.Value.Add(listSecretResponseMessageInstance);
                                
                                JToken contentTypeValue = valueValue["contentType"];
                                if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                                {
                                    string contentTypeInstance = ((string)contentTypeValue);
                                    listSecretResponseMessageInstance.ContentType = contentTypeInstance;
                                }
                                
                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    listSecretResponseMessageInstance.Id = idInstance;
                                }
                                
                                JToken attributesValue = valueValue["attributes"];
                                if (attributesValue != null && attributesValue.Type != JTokenType.Null)
                                {
                                    SecretAttributes attributesInstance = new SecretAttributes();
                                    listSecretResponseMessageInstance.Attributes = attributesInstance;
                                    
                                    JToken enabledValue = attributesValue["enabled"];
                                    if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                                    {
                                        bool enabledInstance = ((bool)enabledValue);
                                        attributesInstance.Enabled = enabledInstance;
                                    }
                                    
                                    JToken nbfValue = attributesValue["nbf"];
                                    if (nbfValue != null && nbfValue.Type != JTokenType.Null)
                                    {
                                        long nbfInstance = ((long)nbfValue);
                                        attributesInstance.NotBefore = nbfInstance;
                                    }
                                    
                                    JToken expValue = attributesValue["exp"];
                                    if (expValue != null && expValue.Type != JTokenType.Null)
                                    {
                                        long expInstance = ((long)expValue);
                                        attributesInstance.Expires = expInstance;
                                    }
                                    
                                    JToken createdValue = attributesValue["created"];
                                    if (createdValue != null && createdValue.Type != JTokenType.Null)
                                    {
                                        long createdInstance = ((long)createdValue);
                                        attributesInstance.Created = createdInstance;
                                    }
                                    
                                    JToken updatedValue = attributesValue["updated"];
                                    if (updatedValue != null && updatedValue.Type != JTokenType.Null)
                                    {
                                        long updatedInstance = ((long)updatedValue);
                                        attributesInstance.Updated = updatedInstance;
                                    }
                                }
                                
                                JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = ((string)property.Name);
                                        string tagsValue = ((string)property.Value);
                                        listSecretResponseMessageInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                            }
                        }
                        
                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                        {
                            string nextLinkInstance = ((string)nextLinkValue);
                            result.NextLink = nextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get
        /// </summary>
        /// <param name='vault'>
        /// Required.
        /// </param>
        /// <param name='secretName'>
        /// Required.
        /// </param>
        /// <param name='top'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<ListSecretsResponseMessage> ListVersionsAsync(string vault, string secretName, int? top, CancellationToken cancellationToken)
        {
            // Validate
            if (vault == null)
            {
                throw new ArgumentNullException("vault");
            }
            if (secretName == null)
            {
                throw new ArgumentNullException("secretName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("vault", vault);
                tracingParameters.Add("secretName", secretName);
                tracingParameters.Add("top", top);
                TracingAdapter.Enter(invocationId, this, "ListVersionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + vault;
            url = url + "/secrets/";
            url = url + Uri.EscapeDataString(secretName);
            url = url + "/versions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-02-01-preview");
            if (top != null)
            {
                queryParameters.Add("maxresults=" + Uri.EscapeDataString(top.Value.ToString()));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ListSecretsResponseMessage result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ListSecretsResponseMessage();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                ListSecretResponseMessage listSecretResponseMessageInstance = new ListSecretResponseMessage();
                                result.Value.Add(listSecretResponseMessageInstance);
                                
                                JToken contentTypeValue = valueValue["contentType"];
                                if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                                {
                                    string contentTypeInstance = ((string)contentTypeValue);
                                    listSecretResponseMessageInstance.ContentType = contentTypeInstance;
                                }
                                
                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    listSecretResponseMessageInstance.Id = idInstance;
                                }
                                
                                JToken attributesValue = valueValue["attributes"];
                                if (attributesValue != null && attributesValue.Type != JTokenType.Null)
                                {
                                    SecretAttributes attributesInstance = new SecretAttributes();
                                    listSecretResponseMessageInstance.Attributes = attributesInstance;
                                    
                                    JToken enabledValue = attributesValue["enabled"];
                                    if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                                    {
                                        bool enabledInstance = ((bool)enabledValue);
                                        attributesInstance.Enabled = enabledInstance;
                                    }
                                    
                                    JToken nbfValue = attributesValue["nbf"];
                                    if (nbfValue != null && nbfValue.Type != JTokenType.Null)
                                    {
                                        long nbfInstance = ((long)nbfValue);
                                        attributesInstance.NotBefore = nbfInstance;
                                    }
                                    
                                    JToken expValue = attributesValue["exp"];
                                    if (expValue != null && expValue.Type != JTokenType.Null)
                                    {
                                        long expInstance = ((long)expValue);
                                        attributesInstance.Expires = expInstance;
                                    }
                                    
                                    JToken createdValue = attributesValue["created"];
                                    if (createdValue != null && createdValue.Type != JTokenType.Null)
                                    {
                                        long createdInstance = ((long)createdValue);
                                        attributesInstance.Created = createdInstance;
                                    }
                                    
                                    JToken updatedValue = attributesValue["updated"];
                                    if (updatedValue != null && updatedValue.Type != JTokenType.Null)
                                    {
                                        long updatedInstance = ((long)updatedValue);
                                        attributesInstance.Updated = updatedInstance;
                                    }
                                }
                                
                                JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = ((string)property.Name);
                                        string tagsValue = ((string)property.Value);
                                        listSecretResponseMessageInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                            }
                        }
                        
                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                        {
                            string nextLinkInstance = ((string)nextLinkValue);
                            result.NextLink = nextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get
        /// </summary>
        /// <param name='nextLink'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<ListSecretsResponseMessage> ListVersionsNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListVersionsNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ListSecretsResponseMessage result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ListSecretsResponseMessage();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                ListSecretResponseMessage listSecretResponseMessageInstance = new ListSecretResponseMessage();
                                result.Value.Add(listSecretResponseMessageInstance);
                                
                                JToken contentTypeValue = valueValue["contentType"];
                                if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                                {
                                    string contentTypeInstance = ((string)contentTypeValue);
                                    listSecretResponseMessageInstance.ContentType = contentTypeInstance;
                                }
                                
                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    listSecretResponseMessageInstance.Id = idInstance;
                                }
                                
                                JToken attributesValue = valueValue["attributes"];
                                if (attributesValue != null && attributesValue.Type != JTokenType.Null)
                                {
                                    SecretAttributes attributesInstance = new SecretAttributes();
                                    listSecretResponseMessageInstance.Attributes = attributesInstance;
                                    
                                    JToken enabledValue = attributesValue["enabled"];
                                    if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                                    {
                                        bool enabledInstance = ((bool)enabledValue);
                                        attributesInstance.Enabled = enabledInstance;
                                    }
                                    
                                    JToken nbfValue = attributesValue["nbf"];
                                    if (nbfValue != null && nbfValue.Type != JTokenType.Null)
                                    {
                                        long nbfInstance = ((long)nbfValue);
                                        attributesInstance.NotBefore = nbfInstance;
                                    }
                                    
                                    JToken expValue = attributesValue["exp"];
                                    if (expValue != null && expValue.Type != JTokenType.Null)
                                    {
                                        long expInstance = ((long)expValue);
                                        attributesInstance.Expires = expInstance;
                                    }
                                    
                                    JToken createdValue = attributesValue["created"];
                                    if (createdValue != null && createdValue.Type != JTokenType.Null)
                                    {
                                        long createdInstance = ((long)createdValue);
                                        attributesInstance.Created = createdInstance;
                                    }
                                    
                                    JToken updatedValue = attributesValue["updated"];
                                    if (updatedValue != null && updatedValue.Type != JTokenType.Null)
                                    {
                                        long updatedInstance = ((long)updatedValue);
                                        attributesInstance.Updated = updatedInstance;
                                    }
                                }
                                
                                JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = ((string)property.Name);
                                        string tagsValue = ((string)property.Value);
                                        listSecretResponseMessageInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                            }
                        }
                        
                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                        {
                            string nextLinkInstance = ((string)nextLinkValue);
                            result.NextLink = nextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Set secret
        /// </summary>
        /// <param name='secretIdentifier'>
        /// Required.
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<SecretResponseMessage> SetAsync(string secretIdentifier, SecretRequestMessage request, CancellationToken cancellationToken)
        {
            // Validate
            if (secretIdentifier == null)
            {
                throw new ArgumentNullException("secretIdentifier");
            }
            if (request == null)
            {
                throw new ArgumentNullException("request");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("secretIdentifier", secretIdentifier);
                tracingParameters.Add("request", request);
                TracingAdapter.Enter(invocationId, this, "SetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + secretIdentifier;
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-02-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject secretRequestMessageValue = new JObject();
                requestDoc = secretRequestMessageValue;
                
                if (request.ContentType != null)
                {
                    secretRequestMessageValue["contentType"] = request.ContentType;
                }
                
                if (request.Value != null)
                {
                    secretRequestMessageValue["value"] = request.Value;
                }
                
                if (request.Attributes != null)
                {
                    JObject attributesValue = new JObject();
                    secretRequestMessageValue["attributes"] = attributesValue;
                    
                    if (request.Attributes.Enabled != null)
                    {
                        attributesValue["enabled"] = request.Attributes.Enabled.Value;
                    }
                    
                    if (request.Attributes.NotBefore != null)
                    {
                        attributesValue["nbf"] = request.Attributes.NotBefore.Value;
                    }
                    
                    if (request.Attributes.Expires != null)
                    {
                        attributesValue["exp"] = request.Attributes.Expires.Value;
                    }
                    
                    if (request.Attributes.Created != null)
                    {
                        attributesValue["created"] = request.Attributes.Created.Value;
                    }
                    
                    if (request.Attributes.Updated != null)
                    {
                        attributesValue["updated"] = request.Attributes.Updated.Value;
                    }
                }
                
                if (request.Tags != null)
                {
                    if (request.Tags is ILazyCollection == false || ((ILazyCollection)request.Tags).IsInitialized)
                    {
                        JObject tagsDictionary = new JObject();
                        foreach (KeyValuePair<string, string> pair in request.Tags)
                        {
                            string tagsKey = pair.Key;
                            string tagsValue = pair.Value;
                            tagsDictionary[tagsKey] = tagsValue;
                        }
                        secretRequestMessageValue["tags"] = tagsDictionary;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SecretResponseMessage result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new SecretResponseMessage();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            result.Id = idInstance;
                        }
                        
                        JToken valueValue = responseDoc["value"];
                        if (valueValue != null && valueValue.Type != JTokenType.Null)
                        {
                            string valueInstance = ((string)valueValue);
                            result.Value = valueInstance;
                        }
                        
                        JToken contentTypeValue = responseDoc["contentType"];
                        if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                        {
                            string contentTypeInstance = ((string)contentTypeValue);
                            result.ContentType = contentTypeInstance;
                        }
                        
                        JToken attributesValue2 = responseDoc["attributes"];
                        if (attributesValue2 != null && attributesValue2.Type != JTokenType.Null)
                        {
                            SecretAttributes attributesInstance = new SecretAttributes();
                            result.Attributes = attributesInstance;
                            
                            JToken enabledValue = attributesValue2["enabled"];
                            if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                            {
                                bool enabledInstance = ((bool)enabledValue);
                                attributesInstance.Enabled = enabledInstance;
                            }
                            
                            JToken nbfValue = attributesValue2["nbf"];
                            if (nbfValue != null && nbfValue.Type != JTokenType.Null)
                            {
                                long nbfInstance = ((long)nbfValue);
                                attributesInstance.NotBefore = nbfInstance;
                            }
                            
                            JToken expValue = attributesValue2["exp"];
                            if (expValue != null && expValue.Type != JTokenType.Null)
                            {
                                long expInstance = ((long)expValue);
                                attributesInstance.Expires = expInstance;
                            }
                            
                            JToken createdValue = attributesValue2["created"];
                            if (createdValue != null && createdValue.Type != JTokenType.Null)
                            {
                                long createdInstance = ((long)createdValue);
                                attributesInstance.Created = createdInstance;
                            }
                            
                            JToken updatedValue = attributesValue2["updated"];
                            if (updatedValue != null && updatedValue.Type != JTokenType.Null)
                            {
                                long updatedInstance = ((long)updatedValue);
                                attributesInstance.Updated = updatedInstance;
                            }
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey2 = ((string)property.Name);
                                string tagsValue2 = ((string)property.Value);
                                result.Tags.Add(tagsKey2, tagsValue2);
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update secret
        /// </summary>
        /// <param name='secretIdentifier'>
        /// Required.
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<SecretResponseMessage> UpdateAsync(string secretIdentifier, UpdateSecretRequestMessage request, CancellationToken cancellationToken)
        {
            // Validate
            if (secretIdentifier == null)
            {
                throw new ArgumentNullException("secretIdentifier");
            }
            if (request == null)
            {
                throw new ArgumentNullException("request");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("secretIdentifier", secretIdentifier);
                tracingParameters.Add("request", request);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + secretIdentifier;
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-02-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject updateSecretRequestMessageValue = new JObject();
                requestDoc = updateSecretRequestMessageValue;
                
                if (request.ContentType != null)
                {
                    updateSecretRequestMessageValue["contentType"] = request.ContentType;
                }
                
                if (request.Id != null)
                {
                    updateSecretRequestMessageValue["id"] = request.Id;
                }
                
                if (request.Attributes != null)
                {
                    JObject attributesValue = new JObject();
                    updateSecretRequestMessageValue["attributes"] = attributesValue;
                    
                    if (request.Attributes.Enabled != null)
                    {
                        attributesValue["enabled"] = request.Attributes.Enabled.Value;
                    }
                    
                    if (request.Attributes.NotBefore != null)
                    {
                        attributesValue["nbf"] = request.Attributes.NotBefore.Value;
                    }
                    
                    if (request.Attributes.Expires != null)
                    {
                        attributesValue["exp"] = request.Attributes.Expires.Value;
                    }
                    
                    if (request.Attributes.Created != null)
                    {
                        attributesValue["created"] = request.Attributes.Created.Value;
                    }
                    
                    if (request.Attributes.Updated != null)
                    {
                        attributesValue["updated"] = request.Attributes.Updated.Value;
                    }
                }
                
                if (request.Tags != null)
                {
                    if (request.Tags is ILazyCollection == false || ((ILazyCollection)request.Tags).IsInitialized)
                    {
                        JObject tagsDictionary = new JObject();
                        foreach (KeyValuePair<string, string> pair in request.Tags)
                        {
                            string tagsKey = pair.Key;
                            string tagsValue = pair.Value;
                            tagsDictionary[tagsKey] = tagsValue;
                        }
                        updateSecretRequestMessageValue["tags"] = tagsDictionary;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SecretResponseMessage result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new SecretResponseMessage();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken contentTypeValue = responseDoc["contentType"];
                        if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                        {
                            string contentTypeInstance = ((string)contentTypeValue);
                            result.ContentType = contentTypeInstance;
                        }
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            result.Id = idInstance;
                        }
                        
                        JToken attributesValue2 = responseDoc["attributes"];
                        if (attributesValue2 != null && attributesValue2.Type != JTokenType.Null)
                        {
                            SecretAttributes attributesInstance = new SecretAttributes();
                            result.Attributes = attributesInstance;
                            
                            JToken enabledValue = attributesValue2["enabled"];
                            if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                            {
                                bool enabledInstance = ((bool)enabledValue);
                                attributesInstance.Enabled = enabledInstance;
                            }
                            
                            JToken nbfValue = attributesValue2["nbf"];
                            if (nbfValue != null && nbfValue.Type != JTokenType.Null)
                            {
                                long nbfInstance = ((long)nbfValue);
                                attributesInstance.NotBefore = nbfInstance;
                            }
                            
                            JToken expValue = attributesValue2["exp"];
                            if (expValue != null && expValue.Type != JTokenType.Null)
                            {
                                long expInstance = ((long)expValue);
                                attributesInstance.Expires = expInstance;
                            }
                            
                            JToken createdValue = attributesValue2["created"];
                            if (createdValue != null && createdValue.Type != JTokenType.Null)
                            {
                                long createdInstance = ((long)createdValue);
                                attributesInstance.Created = createdInstance;
                            }
                            
                            JToken updatedValue = attributesValue2["updated"];
                            if (updatedValue != null && updatedValue.Type != JTokenType.Null)
                            {
                                long updatedInstance = ((long)updatedValue);
                                attributesInstance.Updated = updatedInstance;
                            }
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey2 = ((string)property.Name);
                                string tagsValue2 = ((string)property.Value);
                                result.Tags.Add(tagsKey2, tagsValue2);
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
